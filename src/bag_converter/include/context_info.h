// Generated by gencpp from file lio_sam/context_info.msg
// DO NOT EDIT!


#ifndef LIO_SAM_MESSAGE_CONTEXT_INFO_H
#define LIO_SAM_MESSAGE_CONTEXT_INFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <sensor_msgs/PointCloud2.h>

namespace lio_sam
{
template <class ContainerAllocator>
struct context_info_
{
  typedef context_info_<ContainerAllocator> Type;

  context_info_()
    : robotID()
    , robotIDReceive()
    , header()
    , numRing(0)
    , numSector(0)
    , poseX(0.0)
    , poseY(0.0)
    , poseZ(0.0)
    , poseRoll(0.0)
    , posePitch(0.0)
    , poseYaw(0.0)
    , poseIntensity(0.0)
    , scanCloud()
    , scanContextBin()
    , ringKey()  {
    }
  context_info_(const ContainerAllocator& _alloc)
    : robotID(_alloc)
    , robotIDReceive(_alloc)
    , header(_alloc)
    , numRing(0)
    , numSector(0)
    , poseX(0.0)
    , poseY(0.0)
    , poseZ(0.0)
    , poseRoll(0.0)
    , posePitch(0.0)
    , poseYaw(0.0)
    , poseIntensity(0.0)
    , scanCloud(_alloc)
    , scanContextBin(_alloc)
    , ringKey(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _robotID_type;
  _robotID_type robotID;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _robotIDReceive_type;
  _robotIDReceive_type robotIDReceive;

   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int64_t _numRing_type;
  _numRing_type numRing;

   typedef int64_t _numSector_type;
  _numSector_type numSector;

   typedef float _poseX_type;
  _poseX_type poseX;

   typedef float _poseY_type;
  _poseY_type poseY;

   typedef float _poseZ_type;
  _poseZ_type poseZ;

   typedef float _poseRoll_type;
  _poseRoll_type poseRoll;

   typedef float _posePitch_type;
  _posePitch_type posePitch;

   typedef float _poseYaw_type;
  _poseYaw_type poseYaw;

   typedef float _poseIntensity_type;
  _poseIntensity_type poseIntensity;

   typedef  ::sensor_msgs::PointCloud2_<ContainerAllocator>  _scanCloud_type;
  _scanCloud_type scanCloud;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _scanContextBin_type;
  _scanContextBin_type scanContextBin;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _ringKey_type;
  _ringKey_type ringKey;





  typedef boost::shared_ptr< ::lio_sam::context_info_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lio_sam::context_info_<ContainerAllocator> const> ConstPtr;

}; // struct context_info_

typedef ::lio_sam::context_info_<std::allocator<void> > context_info;

typedef boost::shared_ptr< ::lio_sam::context_info > context_infoPtr;
typedef boost::shared_ptr< ::lio_sam::context_info const> context_infoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lio_sam::context_info_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lio_sam::context_info_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lio_sam::context_info_<ContainerAllocator1> & lhs, const ::lio_sam::context_info_<ContainerAllocator2> & rhs)
{
  return lhs.robotID == rhs.robotID &&
    lhs.robotIDReceive == rhs.robotIDReceive &&
    lhs.header == rhs.header &&
    lhs.numRing == rhs.numRing &&
    lhs.numSector == rhs.numSector &&
    lhs.poseX == rhs.poseX &&
    lhs.poseY == rhs.poseY &&
    lhs.poseZ == rhs.poseZ &&
    lhs.poseRoll == rhs.poseRoll &&
    lhs.posePitch == rhs.posePitch &&
    lhs.poseYaw == rhs.poseYaw &&
    lhs.poseIntensity == rhs.poseIntensity &&
    lhs.scanCloud == rhs.scanCloud &&
    lhs.scanContextBin == rhs.scanContextBin &&
    lhs.ringKey == rhs.ringKey;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lio_sam::context_info_<ContainerAllocator1> & lhs, const ::lio_sam::context_info_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lio_sam

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::lio_sam::context_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lio_sam::context_info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lio_sam::context_info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lio_sam::context_info_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lio_sam::context_info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lio_sam::context_info_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lio_sam::context_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9a9c154ef014091338773daa36dd5bd3";
  }

  static const char* value(const ::lio_sam::context_info_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9a9c154ef0140913ULL;
  static const uint64_t static_value2 = 0x38773daa36dd5bd3ULL;
};

template<class ContainerAllocator>
struct DataType< ::lio_sam::context_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lio_sam/context_info";
  }

  static const char* value(const ::lio_sam::context_info_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lio_sam::context_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Robot Name\n"
"string robotID\n"
"\n"
"# Robot Name Receive\n"
"string robotIDReceive\n"
"\n"
"# Cloud Info\n"
"Header header \n"
"\n"
"# Scan context dimension\n"
"int64 numRing\n"
"int64 numSector\n"
"\n"
"# Present robot pose\n"
"float32 poseX\n"
"float32 poseY\n"
"float32 poseZ\n"
"float32 poseRoll\n"
"float32 posePitch\n"
"float32 poseYaw\n"
"float32 poseIntensity\n"
"\n"
"# Point cloud messages\n"
"sensor_msgs/PointCloud2 scanCloud  # extracted feature cloud\n"
"\n"
"# Scan context info\n"
"float32[] scanContextBin\n"
"float32[] ringKey\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/PointCloud2\n"
"# This message holds a collection of N-dimensional points, which may\n"
"# contain additional information such as normals, intensity, etc. The\n"
"# point data is stored as a binary blob, its layout described by the\n"
"# contents of the \"fields\" array.\n"
"\n"
"# The point cloud data may be organized 2d (image-like) or 1d\n"
"# (unordered). Point clouds organized as 2d images may be produced by\n"
"# camera depth sensors such as stereo or time-of-flight.\n"
"\n"
"# Time of sensor data acquisition, and the coordinate frame ID (for 3d\n"
"# points).\n"
"Header header\n"
"\n"
"# 2D structure of the point cloud. If the cloud is unordered, height is\n"
"# 1 and width is the length of the point cloud.\n"
"uint32 height\n"
"uint32 width\n"
"\n"
"# Describes the channels and their layout in the binary data blob.\n"
"PointField[] fields\n"
"\n"
"bool    is_bigendian # Is this data bigendian?\n"
"uint32  point_step   # Length of a point in bytes\n"
"uint32  row_step     # Length of a row in bytes\n"
"uint8[] data         # Actual point data, size is (row_step*height)\n"
"\n"
"bool is_dense        # True if there are no invalid points\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/PointField\n"
"# This message holds the description of one point entry in the\n"
"# PointCloud2 message format.\n"
"uint8 INT8    = 1\n"
"uint8 UINT8   = 2\n"
"uint8 INT16   = 3\n"
"uint8 UINT16  = 4\n"
"uint8 INT32   = 5\n"
"uint8 UINT32  = 6\n"
"uint8 FLOAT32 = 7\n"
"uint8 FLOAT64 = 8\n"
"\n"
"string name      # Name of field\n"
"uint32 offset    # Offset from start of point struct\n"
"uint8  datatype  # Datatype enumeration, see above\n"
"uint32 count     # How many elements in the field\n"
;
  }

  static const char* value(const ::lio_sam::context_info_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lio_sam::context_info_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robotID);
      stream.next(m.robotIDReceive);
      stream.next(m.header);
      stream.next(m.numRing);
      stream.next(m.numSector);
      stream.next(m.poseX);
      stream.next(m.poseY);
      stream.next(m.poseZ);
      stream.next(m.poseRoll);
      stream.next(m.posePitch);
      stream.next(m.poseYaw);
      stream.next(m.poseIntensity);
      stream.next(m.scanCloud);
      stream.next(m.scanContextBin);
      stream.next(m.ringKey);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct context_info_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lio_sam::context_info_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lio_sam::context_info_<ContainerAllocator>& v)
  {
    s << indent << "robotID: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.robotID);
    s << indent << "robotIDReceive: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.robotIDReceive);
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "numRing: ";
    Printer<int64_t>::stream(s, indent + "  ", v.numRing);
    s << indent << "numSector: ";
    Printer<int64_t>::stream(s, indent + "  ", v.numSector);
    s << indent << "poseX: ";
    Printer<float>::stream(s, indent + "  ", v.poseX);
    s << indent << "poseY: ";
    Printer<float>::stream(s, indent + "  ", v.poseY);
    s << indent << "poseZ: ";
    Printer<float>::stream(s, indent + "  ", v.poseZ);
    s << indent << "poseRoll: ";
    Printer<float>::stream(s, indent + "  ", v.poseRoll);
    s << indent << "posePitch: ";
    Printer<float>::stream(s, indent + "  ", v.posePitch);
    s << indent << "poseYaw: ";
    Printer<float>::stream(s, indent + "  ", v.poseYaw);
    s << indent << "poseIntensity: ";
    Printer<float>::stream(s, indent + "  ", v.poseIntensity);
    s << indent << "scanCloud: ";
    s << std::endl;
    Printer< ::sensor_msgs::PointCloud2_<ContainerAllocator> >::stream(s, indent + "  ", v.scanCloud);
    s << indent << "scanContextBin[]" << std::endl;
    for (size_t i = 0; i < v.scanContextBin.size(); ++i)
    {
      s << indent << "  scanContextBin[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.scanContextBin[i]);
    }
    s << indent << "ringKey[]" << std::endl;
    for (size_t i = 0; i < v.ringKey.size(); ++i)
    {
      s << indent << "  ringKey[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.ringKey[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LIO_SAM_MESSAGE_CONTEXT_INFO_H
